// <auto-generated />
using System;
using System.Collections.Generic;
using Elwark.People.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Elwark.People.Infrastructure.Migrations.OauthContext
{
    [DbContext(typeof(OAuthContext))]
    [Migration("20200706173425_InitialOAuth")]
    partial class InitialOAuth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Elwark.People.Domain.AggregatesModel.AccountAggregate.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Links")
                        .IsRequired()
                        .HasColumnName("links")
                        .HasColumnType("json");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnName("picture")
                        .HasColumnType("character varying(2048)")
                        .HasMaxLength(2048);

                    b.Property<DateTimeOffset>("_createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<List<string>>("_roles")
                        .IsRequired()
                        .HasColumnName("roles")
                        .HasColumnType("text[]");

                    b.Property<DateTimeOffset>("_updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Elwark.People.Domain.AggregatesModel.AccountAggregate.Identity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset?>("ConfirmedAt")
                        .HasColumnName("confirmed_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdentificationType")
                        .HasColumnName("identification_type")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationType")
                        .HasColumnName("notification_type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<long>("_accountId")
                        .HasColumnName("account_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("_createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.HasIndex("_accountId");

                    b.HasIndex("IdentificationType", "Value")
                        .IsUnique();

                    b.ToTable("identities");
                });

            modelBuilder.Entity("Elwark.People.Infrastructure.Confirmation.ConfirmationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<long>("Code")
                        .HasColumnName("code")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ExpiredAt")
                        .HasColumnName("expired_at")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("IdentityId")
                        .HasColumnName("identity_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("IdentityId", "Code");

                    b.ToTable("confirmations");
                });

            modelBuilder.Entity("Elwark.People.Domain.AggregatesModel.AccountAggregate.Account", b =>
                {
                    b.OwnsOne("Elwark.People.Domain.AggregatesModel.AccountAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("City")
                                .HasColumnName("city")
                                .HasColumnType("character varying(128)")
                                .HasMaxLength(128);

                            b1.Property<string>("CountryCode")
                                .HasColumnName("country_code")
                                .HasColumnType("character varying(2)")
                                .HasMaxLength(2);

                            b1.HasKey("AccountId");

                            b1.ToTable("accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("Elwark.People.Domain.AggregatesModel.AccountAggregate.Ban", "Ban", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .HasColumnName("account_id")
                                .HasColumnType("bigint");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnName("created_at")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset?>("ExpiredAt")
                                .HasColumnName("expired_at")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Reason")
                                .IsRequired()
                                .HasColumnName("reason")
                                .HasColumnType("character varying(2048)")
                                .HasMaxLength(2048);

                            b1.Property<int>("Type")
                                .HasColumnName("type")
                                .HasColumnType("integer");

                            b1.HasKey("AccountId");

                            b1.ToTable("bans");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("Elwark.People.Domain.AggregatesModel.AccountAggregate.BasicInfo", "BasicInfo", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Bio")
                                .HasColumnName("bio")
                                .HasColumnType("character varying(1024)")
                                .HasMaxLength(1024);

                            b1.Property<DateTime?>("Birthday")
                                .HasColumnName("birthday")
                                .HasColumnType("date");

                            b1.Property<byte>("Gender")
                                .HasColumnName("gender")
                                .HasColumnType("smallint");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasColumnName("language")
                                .HasColumnType("character varying(2)")
                                .HasMaxLength(2);

                            b1.Property<string>("Timezone")
                                .IsRequired()
                                .HasColumnName("timezone")
                                .HasColumnType("character varying(64)")
                                .HasMaxLength(64);

                            b1.HasKey("AccountId");

                            b1.ToTable("accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("Elwark.People.Domain.AggregatesModel.AccountAggregate.Name", "Name", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("FirstName")
                                .HasColumnName("first_name")
                                .HasColumnType("character varying(256)")
                                .HasMaxLength(256);

                            b1.Property<string>("LastName")
                                .HasColumnName("last_name")
                                .HasColumnType("character varying(256)")
                                .HasMaxLength(256);

                            b1.Property<string>("Nickname")
                                .IsRequired()
                                .HasColumnName("nickname")
                                .HasColumnType("character varying(256)")
                                .HasMaxLength(256);

                            b1.HasKey("AccountId");

                            b1.ToTable("accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("Elwark.People.Domain.AggregatesModel.AccountAggregate.Password", "Password", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .HasColumnName("account_id")
                                .HasColumnType("bigint");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnName("hash")
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnName("salt")
                                .HasColumnType("bytea");

                            b1.Property<DateTimeOffset>("_createdAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("created_at")
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValueSql("timezone('utc'::text, now())");

                            b1.HasKey("AccountId");

                            b1.ToTable("passwords");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });
                });

            modelBuilder.Entity("Elwark.People.Domain.AggregatesModel.AccountAggregate.Identity", b =>
                {
                    b.HasOne("Elwark.People.Domain.AggregatesModel.AccountAggregate.Account", null)
                        .WithMany("Identities")
                        .HasForeignKey("_accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
